#!/usr/bin/env python

# asciiweather
# -*-Python-*-

from optparse import OptionParser
import yweather
import sys

colmap = {      # shell escape codes
        'NORM'      : '\033[0m',
        'RED'      : '\033[31;1m',
        'YELLOW'   : '\033[33;1m',
        'ICEBLUE'   : '\033[36;1m',
        'WHITE'     : '\033[37;1m'
}


def getopts():
    parser = OptionParser()
    parser.add_option("-a", help="area code (LID format)", dest="areacode",
                      default="UKXX0085") # default to London
    parser.add_option("-b", help="monochrome", dest="color", action="store_false",
                      default = True)
    parser.add_option("-f", help="fahrenheit", dest="use_celsius", action="store_false",
                      default = True)
    (options, args) = parser.parse_args()
    return options

def get_weather(areacode):
    client = yweather.Client()
    return client.fetch_weather(areacode)

def color(temp):
    if temp > 80:
        showtemp_col = colmap['RED']
    elif temp > 60:
        showtemp_col = colmap['YELLOW']
    elif temp < 40:
        showtemp_col = colmap['WHITE']
    elif temp < 50:
        showtemp_col = colmap['ICEBLUE']
    else:
        showtemp_col = colmap['NORM']
    return (showtemp_col, colmap['NORM'])

def f_to_c(temp):
    return str(int((float(temp) - 32) / 1.8))

def display_weather(weather, is_color, is_celsius):
    for thisday in weather["forecast"]:
        (low, high) = (int(thisday["low"]), int(thisday["high"]))
        if is_celsius:
            (thisday["low"], thisday["high"]) = (f_to_c(thisday["low"]), f_to_c(thisday["high"]))
        thisday["high"] = add_degree(thisday["high"])
        thisday["low"] = add_degree(thisday["low"])
        if is_color:
            (thisday['high_startcol'], thisday['high_endcol']) = color(high)
            (thisday['low_startcol'], thisday['low_endcol']) = color(low)
            print u"{day}: {text} {high_startcol}{high}{high_endcol}/{low_startcol}{low}{low_endcol}".format(**thisday)
        else:
            print u"{day}: {text} {high}/{low}".format(**thisday)

def add_degree(temp):
    return temp.encode("utf-8") + u'\N{DEGREE SIGN}'
            
def main():
    options = getopts()
    weather = get_weather(options.areacode)
    if not weather:
        print "Areacode %s not found" % options.areacode
    else:
        display_weather(weather, options.color, options.use_celsius)


if __name__ == '__main__':
    main()

