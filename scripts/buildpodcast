#!/usr/bin/env python

# buildpodcast - a simple script to generate a podcast feed from
# a directory of mp3s - (c) jamespo [at] gmail [dot] com / 2015
# -*-Python-*-

from __future__ import print_function
import datetime, time
import fnmatch, os
from rfeed import *
import eyed3
from optparse import OptionParser

def getopts():
    parser = OptionParser()
    parser.add_option("-n", help="author name", dest="authorname", 
                      default = "defaultauthor")
    parser.add_option("-e", help="author email", dest="authoremail", 
                      default = "default@email.com")
    parser.add_option("-t", help="podcast title", dest="podtitle", 
                      default = "Default Title")
    parser.add_option("-c", help="podcast category", dest="podcat", 
                      default = "Technology")
    parser.add_option("-u", help="podcast url", dest="podurl")
    parser.add_option("-d", help="podcast description", dest="poddesc",
                      default = "")
    (options, args) = parser.parse_args()
    return options


def buildpodcast(options, files):
    '''takes options & list of mp3 files & returns podcast xml'''
    poditems = []
    xmlurl = "%s/podcast.xml" % options.podurl
    for mp3 in files:
        mp3info = eyed3.load(mp3)
        mp3duration = time.strftime('%H:%M:%S', time.gmtime(mp3info.info.time_secs))
        mp3url = "%s/%s" % (options.podurl, mp3)

        itunes_item = iTunesItem(
            author = mp3info.tag.artist,
            image = "", # add URL to jpg here
            duration = mp3duration,
            explicit = "clean",
            subtitle = "",
            summary = "")

        item = Item(
            title = mp3info.tag.title,
            link = mp3url,
            description = "",
            author = mp3info.tag.artist,
            guid = Guid(mp3url),
            pubDate = datetime.datetime.fromtimestamp(mp3info.tag.file_info.mtime),
            extensions = [itunes_item])

        poditems.append(item)

    itunes = iTunes(
        author = options.authorname,
        subtitle = "",
        summary = "",
        image = "",
        explicit = "clean",
        categories = iTunesCategory(name = options.podcat, subcategory = ''),
        owner = iTunesOwner(name = options.authorname, email = options.authoremail))

    feed = Feed(
        title = options.podtitle,
        link = xmlurl,
        description = options.poddesc,
        language = "en-US",
        lastBuildDate = datetime.datetime.now(),
        items = poditems,
        extensions = [itunes])

    return feed.rss()

if __name__ == "__main__":
    files = [ mp3 for mp3 in os.listdir('.') if fnmatch.fnmatch(mp3, '*.mp3') ]
    options = getopts()
    if options.podurl is None:
        print("URL must be supplied! Exiting", file=sys.stderr)
    else:
        print(buildpodcast(options, files))
