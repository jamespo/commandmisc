#!/usr/bin/env python3
# -*- coding:utf-8 -*-

# natrailmini - CLI for National Rail departures
# based on check_darwin
#
# (c) James Powell / jamespo [at] gmail /  2021
#
# requires nre-darwin-py
# & a configparser format config file in /etc/check_darwin with
# one section Main with keys wsdl and api_key

from nredarwin.webservice import DarwinLdbSession
from optparse import OptionParser
import os
import configparser
import json
from io import StringIO


class StationName(object):
    '''converts station to name & vice versa'''
    # use json in format of https://github.com/fasteroute/national-rail-stations/blob/master/stations.json
    # (suggest cutting this down for actual use)

    def __init__(self, jsonfile):
        self.code2name_lookup = {}
        self.name2code_lookup = {}
        # print(jsonfile)
        with open(jsonfile) as jsf:
            js = json.load(jsf)
        for station in js['locations']:
            self.code2name_lookup[station['crs']] = station['name']
            self.name2code_lookup[station['name']] = station['crs']

    def name2code(self, name):
        '''take name return code (blank if not found)'''
        return self.name2code_lookup.get(name, '')

    def code2name(self, code):
        '''take code return name (blank if not found)'''
        return self.code2name_lookup.get(code, '')


def readconf():
    '''read config file'''
    config = configparser.ConfigParser()
    config.read(
        ['/etc/check_darwin', os.path.expanduser('~/.config/.check_darwin')])
    return (config.get('Main', 'api_key'), config.get('Main', 'wsdl'))


def create_session(api_key, wsdl):
    '''create darwin session'''
    return DarwinLdbSession(wsdl=wsdl, api_key=api_key)


def find_trains(darwin_sess, from_stn, to_stn, st_n):
    '''find trains between to & from stations'''
    board = darwin_sess.get_station_board(from_stn)
    trains = board.train_services
    # find trains going to our destination
    trains_onroute = []
    for train in trains:
        # TODO: cache these details by service_id
        train_details = darwin_sess.get_service_details(train.service_id)
        for calling_point in train_details.subsequent_calling_point_lists[0].calling_points:
            # print calling_point.location_name
            if st_n.name2code(calling_point.location_name) == to_stn:
                trains_onroute.append(train)
                break
    # returns zip of [(train time,'On time'),]
    return zip([trn.std for trn in trains_onroute],
               [trn.etd for trn in trains_onroute])


def output_small(from_stn, to_stn, timetable):
    '''short display output'''
    output = []
    for trn_time, trn_ontime in timetable:
        if trn_ontime == 'On time':
            output.append(trn_time)
        else:
            output.append("!%s" % trn_time)
    return "%s>%s: %s" % (from_stn, to_stn, ', '.join(output))


def output_json(from_stn, to_stn, timetable):
    '''JSON output'''
    times = { 'from' : from_stn,
              'to'   : to_stn }
    for cnt, (trn_time, trn_ontime) in enumerate(timetable):
        if trn_ontime == 'On time':
            times["time%s" % cnt] = trn_time
        else:
            times["time%s" % cnt] = "!%s" % trn_time
    return json.dumps(times)



def get_cli_options():
    parser = OptionParser()
    parser.add_option("-f", "--from", help="Departure Station Code (from)",
                      dest="from_stn", default=None)
    parser.add_option("-t", "--to", help="Destination Station Code (to)",
                      dest="to_stn", default=None)
    parser.add_option("-j", "--jsonfile", help="Station to code lookup file",
                      dest="jsonfile", default="stations.json")
    parser.add_option("-o", "--outputformat", help="Output format (txt|json)",
                      dest="outputformat", default="txt")
    options, _ = parser.parse_args()
    if None in (options.from_stn, options.to_stn):
        return (None, None, None, None)
    else:
        return (options.from_stn.upper(), options.to_stn.upper(),
                options.jsonfile, options.outputformat)


# start of main program
def main():
    from_stn, to_stn, jsonfile, oformat = get_cli_options()
    st_n = StationName(jsonfile)
    if None in (from_stn, to_stn):
        status = 'Invalid arguments'
    else:
        api_key, wsdl = readconf()
        sess = create_session(api_key, wsdl)
        train_details = find_trains(sess, from_stn, to_stn, st_n)
        if oformat == "txt":
            status = output_small(from_stn, to_stn, train_details)
        else:
            # JSON
            status = output_json(from_stn, to_stn, train_details)
    print(status)


if __name__ == "__main__":
    main()
