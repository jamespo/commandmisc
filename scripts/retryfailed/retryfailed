#!/usr/bin/env python
# retryfailed - resilient executable run
# (c) jamespo [at] gmail [dot] com / 2016
# -*-Python-*-

from subprocess import Popen, PIPE
import re, operator, sys, time
from optparse import OptionParser

class RetryFailed(object):
    def __init__(self):
        '''get parameters from cmd line'''
        usage = "usage: %prog [options] command arg1 arg2"
        parser = OptionParser(usage=usage)
        parser.add_option("-n", help="# retry attempts [default %default]",
                          action="store", dest="numretries", default = "1",
                          type="int")
        parser.add_option("-d", help="retry delay (secs) [default %default]",
                          action="store", dest="retrydelay", default="60",
                          type="int")
        parser.add_option("-b", help="backoff multiplier [default %default]",
                          action="store", dest="backoff", default="1.5",
                          type="float")
        parser.add_option("-t", help="success test [default %default]",
                          action="store", dest="test", default="rc=0")
        (self.options, args) = parser.parse_args()
        self.options.cmd = args
        self.usage = parser.print_help()
        # parse test (argument operator value)
        ops = { "=" : operator.eq,
                ">" : operator.gt,
                "<" : operator.lt,
                "!=" : operator.ne }
        pt = re.match(r'(rc|stderr|stdout) *(=|!=|>|<|contains) *(.*)$', 
            self.options.test)
        (self.testarg, self.testoper, self.testvalue) \
            = (pt.group(1), ops[pt.group(2)], pt.group(3))

    def success(self):
        '''run test on the output / rc'''
        return self.testoper( int(getattr(self, self.testarg)),
            int(self.testvalue))

    def run(self):
        '''loop through runs of the cmd until exhausted'''
        sleep_secs = self.options.retrydelay
        for run_count in range(1, self.options.numretries + 2):
            if run_count > 1:
                time.sleep(sleep_secs)
                sleep_secs = sleep_secs * self.options.backoff
            self.runcmd(self.options.cmd)
            if self.success():
                self.output("SUCCESS")
        self.output("FAILED: all retries (%d) used" % self.options.numretries)

    def output(self, status):
        sys.stderr.write("%s\n%s\n" % (status, self.stderr))
        sys.stdout.write("%s" % self.stdout)
        sys.exit(self.rc)

    def runcmd(self, cmd):
        '''run cmd'''
        p = Popen(cmd, stdout=PIPE, stderr=PIPE)
        (self.stdout, self.stderr) = p.communicate()
        self.rc = p.returncode

def main():
    rf = RetryFailed()
    if not len(rf.options.cmd):
        rf.usage
    else:
        rf.run()

if __name__ == '__main__':
    main()

