#!/usr/bin/perl

# gmail-spamassassin - apply spamassassin to gmail INBOX
# uses code from Net::IMAP::Simple docs
# v0.1 by James Powell - jamespo [at] gmail [dot] com - Jun 2009 
# licensed under GPL v3

# USAGE: run this in cron
# */15 * * * *  /usr/local/bin/gmail-spamassassin

# In Gmail create a new Label "SpamChecked" - settings "Hide in label list",
# "Hide in message list", "Show in IMAP" - this allows the script to keep
# track of checked messages

# conf file lives in ~/.priv/gmailrc
# FORMAT user:pass

use lib '.';

use Net::IMAP::Simple::Gmail;
use Data::Dumper; # DEBUG
use Mail::SpamAssassin;
use Encode;
use IO::Socket::SSL 'inet4'; # IPv6 breaks connection sometimes
use strict;

my ($user, $pass) = @{&loadconf};
my $server = 'imap.gmail.com';
my $checked_label = 'SpamChecked';

my $imap = Net::IMAP::Simple::Gmail->new($server, debug => $ENV{DEBUG} ? 1 : 0) ||
    die "Unable to connect to IMAP: $Net::IMAP::Simple::errstr\n";

# Log on
if(!$imap->login($user, $pass)) {
    die "Login failed: " . $imap->errstr . "\n";
}

my $spamtest = Mail::SpamAssassin->new({debug => $ENV{DEBUGSA} ? 'all' : ''});

my $nm = $imap->select('INBOX');

# loop round INBOX
for (my $i = 1; $i <= $nm; $i++) {
    next if ($imap->seen($i)); # skip seen
    my @labels = @{$imap->get_labels($i)};
    next if (grep { $_ eq $checked_label } @labels); # skip checked
    my @maillines =  @{ $imap->get($i) };
    pop @maillines; # get rid of flags line
    my $subj;
    # get subject
    foreach (@maillines) {
	if (/^Subject: ?(.*)$/i) {
	    $subj = decode("MIME-Header", $1);
	    last;
	} 
    }
    my $msg = join '', @maillines;

    print $msg if ($ENV{DEBUG});

    my $mail = $spamtest->parse($msg);
    my $status = $spamtest->check($mail);

    # reset flag as unread & set SpamChecked label so we don't recheck
    $imap->sub_flags( $i, qw(\Seen Old) ) or warn $imap->errstr;
    $imap->copy( $i, $checked_label ) or warn $imap->errstr;

    if ($status->is_spam()) {
	print "SPAM detected - Subject: $subj\n";
	# move to spam folder
	$imap->copy( $i, '[Gmail]/Spam' ) or warn $imap->errstr;
    } else {
	print "CLEAN - Subject: $subj\n";
    }

    $status->finish();
    $mail->finish();
}



$imap->quit;
exit(0);

sub loadconf {
    my $conf = $ENV{HOME} . '/.priv/gmailrc';
    die "$conf does not exist" unless (-f $conf);
    open(CONF, $conf);
    my $cl = <CONF>;
    chomp($cl);
    my @userpass = split /:/, $cl;
    close(CONF);
    return \@userpass;
}
